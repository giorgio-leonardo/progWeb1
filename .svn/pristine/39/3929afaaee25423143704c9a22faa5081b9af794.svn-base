/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package servlets;

import db.DbManager;
import db.User;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import support.Utils;

/**
 *
 * @author giorgio
 */
public class ProcessButtons extends HttpServlet
{

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    private DbManager manager;
    
    @Override
    public void init() throws ServletException
    {
        this.manager = (DbManager)super.getServletContext().getAttribute("dbmanager");
        
    }
    
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
    {
        
        
        String btnValue = (String)request.getParameter("btn");
        
        switch(btnValue)
        {
            case "creaGruppo":
                response.sendRedirect("CreateGroup");
                break;
            case "Annulla":
                response.sendRedirect("LandingPage");
                break;
            case "visualizzaGruppi":
                response.sendRedirect("Groups");
                break;
            case "grpConferma":
                Integer i;
                i = insertGroup(request, response);
                insertInvites(request, response, i);
                response.sendRedirect("LandingPage");
                break;
            case "invitiAiGruppi":
                response.sendRedirect("AcceptInvites");
                break;
            case "aciConferma":
                acceptInvites(request, response);
                response.sendRedirect("LandingPage");
                break;
            
            case "logout":
                {
                    RequestDispatcher rd = request.getRequestDispatcher("Logout");
                    rd.forward(request, response);
                }
                break;
        }
    }
    
    private synchronized void acceptInvites(HttpServletRequest request, HttpServletResponse response) throws ServletException
    {
        HttpSession session = request.getSession(false);
        User user = (User)session.getAttribute("user");
        String[] chks = request.getParameterValues("chk");
        
        for(String s: chks)
        {
            try
            {
                manager.acceptInvites(Integer.parseInt(s), user.getUserID(), false);
            }
            catch(SQLException e)
            {
                Utils.toLog(getClass().getName() + ": " + e.getMessage(), "e");
                throw new ServletException(e);
            }
        }
    }
        
    
    private synchronized void insertInvites(HttpServletRequest request, HttpServletResponse response, Integer groupID) throws ServletException
    {
        HttpSession session = request.getSession(false);
        User user = (User)session.getAttribute("user");
        String[] chks = request.getParameterValues("chk");
        ArrayList<User> users = new ArrayList<User>();
        
        try
        {
            manager.insertUserInGroup(groupID, user.getUserID());
        }
        catch(SQLException e)
        {
            Utils.toLog(getClass().getName() + ": " + e.getMessage(), "e");
            throw new ServletException(e);
        }
        
        for(String s: chks)
        {
            try
            {
                users.add(manager.getUserFromUserName(s));
            }
            catch(SQLException e)
            {
                Utils.toLog(getClass().getName() + ": " + e.getMessage(), "e");
                throw new ServletException(e);
            }
        }
        try
        {
            manager.insertIvites(groupID, users);
        }
        catch(SQLException e)
        {
            Utils.toLog(getClass().getName() + ": " + e.getMessage(), "e");
            throw new ServletException(e);
        }
    }
    
    private synchronized Integer insertGroup(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
    {
        Integer ret = 0;
        HttpSession session = request.getSession(false);
        User user = (User)session.getAttribute("user");
        String groupsStoragePath = (String)session.getAttribute("groupsStoragePath");
        
        String groupName = request.getParameter("groupName");
        if (!groupName.equals(""))
        {
            try
            {
                ret = manager.createGroup(user.getUserID(), groupName);
                Utils.createGroupFolder(groupsStoragePath, groupName);
            }
            catch (SQLException e)
            {
                Utils.toLog(getClass().getName() + ": " + e.getMessage(), "e");
                throw new ServletException(e);
            }
        }
        else
        {
            PrintWriter out = response.getWriter();
            Utils.pageHeader(out);
            Utils.printAlert(out, request, "Il nome del gruppo non pu√≤ essere vuoto", "CreateGroup");
            Utils.pageFooter(out);
        }
        
        return ret;
    }
}
